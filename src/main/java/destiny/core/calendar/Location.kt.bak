/**
 * @author smallufo
 * Created on 2003/3/19 at 上午 12:35:41
 */
package destiny.core.calendar

import com.google.common.collect.ImmutableMap
import destiny.tools.AlignTools
import destiny.tools.LocaleUtils
import destiny.tools.location.TimeZoneUtils
import org.apache.commons.lang3.StringUtils

import java.io.Serializable
import java.time.ZoneId
import java.time.ZoneOffset
import java.util.*

import destiny.core.calendar.EastWest.EAST
import destiny.core.calendar.EastWest.WEST
import destiny.core.calendar.NorthSouth.NORTH
import destiny.core.calendar.NorthSouth.SOUTH

class Location : Serializable {

  val eastWest: EastWest // = EAST;
  val lngDeg: Int // = 121;
  val lngMin: Int // = 30;
  val lngSec: Double // = 0;

  val northSouth: NorthSouth // = NORTH;
  val latDeg: Int //= 25;
  val latMin: Int // = 3;
  val latSec: Double // = 0;

  /**
   * TimeZone id , 例如 "Asia/Taipei"
   * 2017-04-09 起， 用以取代 TimeZone field , 降低記憶體用量
   */
  private var tzid = "Asia/Taipei"

  /**
   * 2012-03-04 補加上 :
   * 強制覆蓋與 GMT 的時差 , 優先權高於 [.tzid] !
   */
  private var minuteOffset: Int? = null

  var altitudeMeter = 0.0
    private set //高度（公尺）

  /**
   * 2012/03 格式：
   * 012345678901234567890123456789012345678901234567890
   * +DDDMMSSSSS+DDMMSSSSS Alt~ TimeZone~ [minuteOffset]
   * 範例 :
   * +1213012.34+25 312.34 12.3456 Asia/Taipei 480
   * 尾方的 minuteOffset 為 optional , 如果有的話，會 override Asia/Taipei 的 minuteOffset
   */
  //舊：sb.append(AlignUtil.alignRight(this.minuteOffset, 4 , ' '));
  val debugString: String
    get() {
      val sb = StringBuilder()
      sb.append(if (eastWest === EAST) '+' else '-')
      sb.append(StringUtils.leftPad(this.lngDeg.toString(), 3, ' '))
      sb.append(StringUtils.leftPad(this.lngMin.toString(), 2, ' '))
      sb.append(AlignTools.alignRight(this.lngSec, 5, ' '))

      sb.append(if (northSouth === NORTH) '+' else '-')
      sb.append(StringUtils.leftPad(this.latDeg.toString(), 2, ' '))
      sb.append(StringUtils.leftPad(this.latMin.toString(), 2, ' '))
      sb.append(AlignTools.alignRight(this.latSec, 5, ' '))

      sb.append(" ").append(this.altitudeMeter)
      sb.append(' ').append(tzid)
      if (minuteOffset != null)
        sb.append(" ").append(minuteOffset)

      return sb.toString()
    }

  /**
   * @return 取得經度，in double，包含正負值
   */
  val longitude: Double
    get() = getLongitude(eastWest, lngDeg, lngMin, lngSec)

  /**
   * @return 取得緯度，in double，包含正負值
   */
  val latitude: Double
    get() = getLatitude(northSouth, latDeg, latMin, latSec)

  /**
   * 取得經緯度的十進位表示法，先緯度、再精度
   */
  val decimal: String
    get() {
      val sb = StringBuilder()
      sb.append(latitude)
      sb.append(',')
      sb.append(longitude)
      return sb.toString()
    }

  val isEast: Boolean
    get() = eastWest === EAST

  val isNorth: Boolean
    get() = northSouth === NORTH

  val timeZone: TimeZone
    get() = TimeZone.getTimeZone(tzid)

  val zoneId: ZoneId
    get() = ZoneId.of(tzid)


  /**
   * 與 GMT 的時差 (分鐘)
   * [.minuteOffset] 的優先權高於 [.tzid]
   */
  val finalMinuteOffset: Int
    get() = if (minuteOffset != null)
      minuteOffset!!
    else
      TimeZone.getTimeZone(tzid).rawOffset / (60 * 1000)

  val zoneOffset: ZoneOffset
    get() {
      val totalSeconds = finalMinuteOffset * 60
      return ZoneOffset.ofTotalSeconds(totalSeconds)
    }


  /**
   * 最詳盡的 constructor
   *
   * 參考 [.getDebugString]
   * 2012/03 格式：
   * 012345678901234567890123456789012345678901234567890
   * +DDDMMSSSSS+DDMMSSSSS Alt~ TimeZone~ [minuteOffset]
   */
  @JvmOverloads constructor(eastWest: EastWest, lngDeg: Int, lngMin: Int, lngSec: Double,
                            northSouth: NorthSouth, latDeg: Int, latMin: Int, latSec: Double,
                            altitudeMeter: Double, tzid: String, minuteOffset: Int? = null) {
    this.eastWest = eastWest
    this.lngDeg = lngDeg
    this.lngMin = lngMin
    this.lngSec = lngSec
    this.northSouth = northSouth
    this.latDeg = latDeg
    this.latMin = latMin
    this.latSec = latSec
    this.tzid = tzid
    this.altitudeMeter = altitudeMeter
    this.minuteOffset = minuteOffset
  }

  /** 承上  , 以 TimeZone 傳入 , 轉為 tzid  */
  constructor(eastWest: EastWest, lngDeg: Int, lngMin: Int, lngSec: Double,
              northSouth: NorthSouth, latDeg: Int, latMin: Int, latSec: Double,
              altitudeMeter: Double, timeZone: TimeZone) : this(eastWest, lngDeg, lngMin, lngSec, northSouth, latDeg,
                                                                latMin, latSec, altitudeMeter, timeZone.id) {
  }

  /** 大家比較常用的，只有「度、分」。省略「秒」以及「高度」  */
  constructor(eastWest: EastWest, lngDeg: Int, lngMin: Int,
              northSouth: NorthSouth, latDeg: Int, latMin: Int,
              tzid: String) : this(eastWest, lngDeg, lngMin, 0.0, northSouth, latDeg, latMin, 0.0, 0.0, tzid) {
  }


  /** 省略高度  */
  constructor(eastWest: EastWest, lngDeg: Int, lngMin: Int, lngSec: Double,
              northSouth: NorthSouth, latDeg: Int, latMin: Int, latSec: Double,
              tzid: String) : this(eastWest, lngDeg, lngMin, lngSec, northSouth, latDeg, latMin, latSec, 0.0, tzid) {
  }

  /** 承上 , 以 TimeZone 傳入  */
  constructor(eastWest: EastWest, lngDeg: Int, lngMin: Int, lngSec: Double,
              northSouth: NorthSouth, latDeg: Int, latMin: Int, latSec: Double,
              timeZone: TimeZone) : this(eastWest, lngDeg, lngMin, lngSec, northSouth, latDeg, latMin, latSec, 0.0,
                                         timeZone.id) {
  }

  /** 比較省略的 constructor  , 去除東西經、南北緯 , 其值由 經度/緯度的正負去判斷  */
  constructor(lngDeg: Int, lngMin: Int, lngSec: Double,
              latDeg: Int, latMin: Int, latSec: Double,
              timeZone: TimeZone) : this(
    if (lngDeg >= 0) EAST else WEST, Math.abs(lngDeg), lngMin, lngSec,
    if (latDeg >= 0) NORTH else SOUTH, Math.abs(latDeg), latMin, latSec,
    0.0,
    timeZone.id
                                        ) {
  }

  /** 較省略的 constructor , 度數以 double 取代  */
  constructor(eastWest: EastWest, lng: Double, northSouth: NorthSouth, lat: Double,
              altitudeMeter: Double, tzid: String, minuteOffset: Int?) {
    this.eastWest = eastWest
    this.lngDeg = Math.abs(lng).toInt()
    this.lngMin = ((Math.abs(lng) - lngDeg) * 60).toInt()
    this.lngSec = Math.abs(lng) * 3600 - (lngDeg * 3600).toDouble() - (lngMin * 60).toDouble()

    this.northSouth = northSouth
    this.latDeg = Math.abs(lat).toInt()
    this.latMin = ((Math.abs(lat) - latDeg) * 60).toInt()
    this.latSec = Math.abs(lat) * 3600 - (latDeg * 3600).toDouble() - (latMin * 60).toDouble()

    this.altitudeMeter = altitudeMeter
    this.tzid = tzid
    this.minuteOffset = minuteOffset
  }


  /** 更省略的 constructor  */
  constructor(lng: Double, lat: Double, altMeter: Double, tzid: String, minuteOffset: Int?) : this(
    if (lng >= 0) EAST else WEST, lng,
    if (lat >= 0) NORTH else SOUTH, lat,
    altMeter, tzid, minuteOffset) {
  }

  constructor(lng: Double, lat: Double, tzid: String, minuteOffset: Int?) : this(
    if (lng >= 0) EAST else WEST, lng,
    if (lat >= 0) NORTH else SOUTH, lat,
    0.0, tzid, minuteOffset) {
  }

  constructor(lng: Double, lat: Double, altitudeMeter: Double, tzid: String) : this(lng, lat, altitudeMeter, tzid,
                                                                                    null) {
  }

  constructor(lng: Double, lat: Double, tzid: String) : this(lng, lat, 0.0, tzid) {}

  constructor(lng: Double, lat: Double, timeZone: TimeZone, minuteOffset: Int?) : this(lng, lat, timeZone.id,
                                                                                       minuteOffset) {
  }

  constructor(lng: Double, lat: Double, timeZone: TimeZone) : this(lng, lat, timeZone.id, null) {}

  /** 沒有 tzid , 直接帶入 minuteOffset (優先度最高)  */
  constructor(lng: Double, lat: Double, minuteOffset: Int) {
    this.eastWest = if (lng >= 0) EAST else WEST
    this.lngDeg = Math.abs(lng).toInt()
    this.lngMin = ((Math.abs(lng) - lngDeg) * 60).toInt()
    this.lngSec = Math.abs(lng) * 3600 - (lngDeg * 3600).toDouble() - (lngMin * 60).toDouble()

    this.northSouth = if (lat >= 0) NORTH else SOUTH
    this.latDeg = Math.abs(lat).toInt()
    this.latMin = ((Math.abs(lat) - latDeg) * 60).toInt()
    this.latSec = Math.abs(lat) * 3600 - (latDeg * 3600).toDouble() - (latMin * 60).toDouble()

    this.minuteOffset = minuteOffset
  }

  override fun toString(): String {
    return LocationDecorator.getOutputString(this, Locale.getDefault())
  } //toString()

  fun toString(locale: Locale): String {
    return LocationDecorator.getOutputString(this, locale)
  }


  override fun equals(o: Any?): Boolean {
    if (this === o)
      return true
    if (o !is Location)
      return false
    val location = o as Location?
    return lngDeg == location!!.lngDeg && lngMin == location.lngMin && java.lang.Double.compare(location.lngSec,
                                                                                                lngSec) == 0 && latDeg == location.latDeg && latMin == location.latMin && java.lang.Double.compare(
      location.latSec, latSec) == 0 && java.lang.Double.compare(location.altitudeMeter,
                                                                altitudeMeter) == 0 && eastWest === location.eastWest && northSouth === location.northSouth && tzid == location.tzid && minuteOffset == location.minuteOffset
  }

  override fun hashCode(): Int {
    return java.util.Objects.hash(eastWest, lngDeg, lngMin, lngSec, northSouth, latDeg, latMin, latSec, tzid,
                                  minuteOffset, altitudeMeter)
  }

  /** 查詢， minuteOffset 是否被設定 (非null)  */
  fun hasMinuteOffset(): Boolean {
    return minuteOffset != null
  }

  companion object {

    private val locMap = ImmutableMap.Builder<Locale, Location>()
      // de , 柏林
      .put(Locale.GERMAN, Location(EAST, 13, 24, NORTH, 52, 31, "Europe/Berlin"))
      // de_DE , 柏林
      .put(Locale.GERMANY, Location(EAST, 13, 24, NORTH, 52, 31, "Europe/Berlin"))

      // en , 紐約 , 40.758899, -73.985131 , 時報廣場
      .put(Locale.ENGLISH, Location(-73.985131, 40.758899, "America/New_York"))
      // en_US , 紐約
      .put(Locale.US, Location(-73.985131, 40.758899, "America/New_York"))

      // en_AU , 雪梨
      .put(Locale("en", "AU"), Location(EAST, 151, 12, 40.0, SOUTH, 33, 51, 36.0, "Australia/Sydney"))
      // en_BW , 波札那 Botswana
      .put(Locale("en", "BW"), Location(EAST, 25, 55, SOUTH, 24, 40, "Africa/Gaborone"))
      // en_CA , 多倫多
      .put(Locale.CANADA, Location(WEST, 79, 24, NORTH, 43, 40, "America/Toronto"))
      // en_DK , 丹麥 哥本哈根 Copenhagen
      .put(Locale("en", "DK"), Location(EAST, 12, 34, NORTH, 55, 43, "Europe/Copenhagen"))
      // en_GB , 倫敦
      .put(Locale.UK, Location(WEST, 0, 7, NORTH, 51, 30, "Europe/London"))
      // en_HK , 香港
      .put(Locale("en", "HK"), Location(EAST, 114.1735865, NORTH, 22.2798721, 0.0, "Asia/Hong_Kong", null))
      // en_IE , 愛爾蘭 Ireland , 都柏林 Dublin
      .put(Locale("en", "IE"), Location(WEST, 6.2592, NORTH, 53.3472, 0.0, "Europe/Dublin", null))
      // en_MY , 馬來西亞 , 吉隆坡
      .put(Locale("en", "MY"), Location(EAST, 101, 42, NORTH, 3, 8, "Asia/Kuala_Lumpur"))
      // en_NZ , 紐西蘭 , 奧克蘭 Auckland (最大城市)
      .put(Locale("en", "NZ"), Location(EAST, 174, 45, SOUTH, 36, 52, "Pacific/Auckland"))
      // en_PH , 菲律賓 , 馬尼拉
      .put(Locale("en", "PH"), Location(EAST, 121, 0, NORTH, 14, 35, "Asia/Manila"))
      // en_SG , 新加坡
      .put(Locale("en", "SG"), Location(EAST, 103, 51, NORTH, 1, 17, "Asia/Singapore"))
      // en_ZA , 南非 , 約翰尼斯堡
      .put(Locale("en", "ZA"), Location(EAST, 27, 54, SOUTH, 26, 8, "Africa/Johannesburg"))
      // en_ZW , 辛巴威 , 哈拉雷
      .put(Locale("en", "ZW"), Location(EAST, 31, 3, SOUTH, 17, 50, "Africa/Harare"))

      // fr , 巴黎
      .put(Locale.FRENCH, Location(EAST, 2, 20, NORTH, 48, 52, "Europe/Paris"))
      // fr_FR , 巴黎
      .put(Locale.FRANCE, Location(EAST, 2, 20, NORTH, 48, 52, "Europe/Paris"))

      // it , 羅馬
      .put(Locale.ITALIAN, Location(EAST, 12, 29, NORTH, 41, 54, "Europe/Rome"))
      // it_IT , 羅馬
      .put(Locale.ITALY, Location(EAST, 12, 29, NORTH, 41, 54, "Europe/Rome"))


      // ja , 東京
      .put(Locale.JAPANESE, Location(EAST, 139, 46, 0.0, NORTH, 35, 40, 50.0, "Asia/Tokyo"))
      // ja_JP , 東京
      .put(Locale.JAPAN, Location(EAST, 139, 45, 0.0, NORTH, 35, 40, 0.0, "Asia/Tokyo"))

      // ko , 首爾
      .put(Locale.KOREAN, Location(EAST, 127, 0, NORTH, 37, 32, "Asia/Seoul"))
      // ko_KR , 首爾
      .put(Locale.KOREA, Location(EAST, 127, 0, NORTH, 37, 32, "Asia/Seoul"))


      // zh , 北京
      //.put(Locale.CHINESE , new Location(EastWest.EAST , 116 , 23 , NorthSouth.NORTH , 39 , 55 , "Asia/Shanghai"))
      .put(Locale.CHINESE, Location(116.397, 39.9075, "Asia/Harbin"))


      // zh_CN , PRC == CHINA == SIMPLIFIED_CHINESE , 北京
      .put(Locale.CHINA, Location(EAST, 116, 23, NORTH, 39, 55, "Asia/Shanghai"))
      // zh_HK , 香港
      .put(Locale("zh", "HK"), Location(EAST, 114.1735865, NORTH, 22.2798721, 0.0, "Asia/Hong_Kong", null))
      // zh_MO , 澳門
      .put(Locale("zh", "MO"), Location(EAST, 113, 35, NORTH, 22, 14, "Asia/Macao"))
      // zh_SG , 新加坡
      .put(Locale("zh", "SG"), Location(EAST, 103, 51, NORTH, 1, 17, "Asia/Singapore"))

      // zh_TW , TAIWAN == TRADITIONAL_CHINESE , 台北市 景福門 (25.039059 , 121.517675) ==> 25°02'20.5"N 121°31'03.6"E
      .put(Locale.TAIWAN, Location(121.517668, 25.039030, "Asia/Taipei"))
      .build()


    fun of(locale: Locale): Location {
      val matchedLocale = LocaleUtils.getBestMatchingLocale(locale, locMap.keys).orElse(Locale.getDefault())
      val loc = locMap[matchedLocale]!!
      return Location(loc.eastWest, loc.lngDeg, loc.lngMin, loc.lngSec, loc.northSouth, loc.latDeg, loc.latMin,
                      loc.latSec, loc.altitudeMeter, loc.tzid, loc.minuteOffset)
    }


    /**
     * 利用 debug String 建立 Location , 缺點：「秒」只限制在小數點下兩位數
     *
     * 2012/3 之後 , 新款格式 : 新增 minuteOffset 欄位
     * 012345678901234567890123~
     * +DDDMMSSSSS+DDMMSSSSS Alt~ TimeZone~ minuteOffset
     *
     * prior 2012/3 格式
     * 012345678901234567890123456789012
     * +DDDMMSSSSS+DDMMSSSSS Alt~ Timezone
     * 範例:
     * +12130  0.0+25 3  0.0 0.0 Asia/Taipei
     *
     * 舊款格式 (2012/3之後不支援)
     * 0123456789012345678901234567
     * +DDDMMSSSSS+DDMMSSSSS+OOO A~
     *
     * 分辨方法：如果能以空白切三段，就是新的，否則就是舊的。
     */
    fun fromDebugString(s: String): Location {
      val eastWest: EastWest
      val ew = s[0]
      if (ew == '+')
        eastWest = EAST
      else if (ew == '-')
        eastWest = WEST
      else
        throw RuntimeException("EW not correct : $ew")

      val lngDeg = Integer.valueOf(s.substring(1, 4).trim { it <= ' ' })
      val lngMin = Integer.valueOf(s.substring(4, 6).trim { it <= ' ' })
      val lngSec = java.lang.Double.valueOf(s.substring(6, 11).trim { it <= ' ' })

      val northSouth: NorthSouth
      val ns = s[11]
      if (ns == '+')
        northSouth = NORTH
      else if (ns == '-')
        northSouth = SOUTH
      else
        throw RuntimeException("ns not correct : $ns")

      val latDeg = Integer.valueOf(s.substring(12, 14).trim { it <= ' ' })
      val latMin = Integer.valueOf(s.substring(14, 16).trim { it <= ' ' })
      val latSec = java.lang.Double.valueOf(s.substring(16, 21).trim { it <= ' ' })

      //包含了 高度以及時區
      val altitudeAndTimezone = s.substring(21)
      //System.out.println("altitudeAndTimezone = '" + altitudeAndTimezone+"'");

      var st = StringTokenizer(altitudeAndTimezone, " ")
      val firstToken = st.nextToken()
      // 2012/3 之後 , restToken 可能還會 append minuteOffset
      val restTokens = altitudeAndTimezone.substring(altitudeAndTimezone.indexOf(firstToken) + firstToken.length + 1)
        .trim { it <= ' ' }
      //System.out.println("firstToken = '" + firstToken + "' , rest = '" + restTokens+"'");

      var altitudeMeter: Double
      var tzid: String
      var minuteOffset: Int? = null
      //檢查 restTokens 是否能轉為 double，如果能的話，代表是舊款 , 否則就是新款
      try {
        altitudeMeter = java.lang.Double.parseDouble(restTokens)
        //parse 成功，代表舊款
        if (firstToken[0] == '+')
          tzid = TimeZoneUtils.getTimeZone(Integer.parseInt(firstToken.substring(1))).id
        else
          tzid = TimeZoneUtils.getTimeZone(Integer.parseInt(firstToken)).id
      } catch (e: NumberFormatException) {
        //新款
        altitudeMeter = java.lang.Double.parseDouble(firstToken)
        st = StringTokenizer(restTokens, " ")
        if (st.countTokens() == 1)
          tzid = restTokens
        else {
          // 2012/3 格式 : timeZone 之後，還附加 minuteOffset
          tzid = st.nextToken()
          minuteOffset = Integer.valueOf(st.nextToken())
        }
      }

      return Location(eastWest, lngDeg, lngMin, lngSec, northSouth, latDeg, latMin, latSec, altitudeMeter, tzid,
                      minuteOffset)
    }

    /** 將「經度」的 (東/西) 度、分、秒 轉為十進位  */
    fun getLongitude(eastWest: EastWest, lngDeg: Int, lngMin: Int, lngSec: Double): Double {
      var result = lngDeg.toDouble() + lngMin.toDouble() / 60.0 + lngSec / 3600.0
      if (eastWest === WEST)
        result = 0 - result
      return result
    }

    fun getLatitude(northSouth: NorthSouth, latDeg: Int, latMin: Int, latSec: Double): Double {
      var result = latDeg.toDouble() + latMin.toDouble() / 60.0 + latSec / 3600.0
      if (northSouth === SOUTH)
        result = 0 - result
      return result
    }
  }
}
/** 省去 minuteOffset  */

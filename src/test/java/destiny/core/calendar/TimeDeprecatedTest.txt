/**
 * Created by smallufo on 2017-03-07.
 */
package destiny.core.calendar;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class TimeDeprecatedTest {

  private Logger logger = LoggerFactory.getLogger(getClass());


  private Time time;
  private Time origin;
  private Time actual ;
  private Time expected ;

  /**
   * 1582/10/4 之後跳到 1582/10/15 , 之前是 Julian Calendar , 之後是 Gregorian Calendar
   * 測試 10/5~10/14 之間的錯誤日期
   */
  @Test
  public void testInvalidTime()
  {
    try
    {
      origin = new Time(1582 , 10 , 5 , 0 , 0 , 0);
      fail("Should throw new RuntimeException");
    }
    catch(RuntimeException expected)
    {
      assertTrue(true);
    }

    try
    {
      origin = new Time(1582 , 10 , 14 , 0 , 0 , 0);
      fail("Should throw new RuntimeException");
    }
    catch(RuntimeException expected)
    {
      assertTrue(true);
    }
  }

   /**
   * 測試由 Julian Day 建立 Time
   * 可以藉由這裡比對 http://aa.usno.navy.mil/data/docs/JulianDate.php
   */
  @Test
  public void testTimeFromJulianDay()
  {
    //曆法交界日期

    // 測試 1582/10/4 --- 1582/10/15 的日期轉換
    actual = new Time(2299160.5 );
    expected = new Time(1582,10,15,0,0,0);
    assertEquals(expected , actual);

    // JD 往前一天 , 跳到 1582/10/4
    actual = new Time(2299159.5 );
    expected = new Time(1582,10,4,0,0,0);
    assertEquals(expected , actual);


    actual = new Time(2453330);
    expected = new Time(2004, 11,20 , 12 , 0 , 0);
    assertEquals(expected , actual);

    actual = new Time(2452549);
    expected = new Time(2002, 10, 1 , 12 , 0 , 0);
    assertEquals(expected , actual);

    //西元元年一月一號
    actual = new Time(1721423.5);
    expected = new Time(true , 1 , 1 , 1 , 0 , 0 , 0);
    assertEquals(expected , actual);

    //西元前一年十二月三十一號
    actual = new Time(1721422.5);
    expected = new Time(false , 1 , 12 , 31 , 0 , 0 , 0);
    assertEquals(expected , actual);

    //西元前一年一月一號
    actual = new Time(1721057.5);
    expected = new Time(false , 1 , 1 , 1 , 0 , 0 , 0);
    assertEquals(expected , actual);

    //西元前二年十二月三十一號
    actual = new Time(1721056.5);
    expected = new Time(false , 2 , 12 , 31 , 0 , 0 , 0);
    assertEquals(expected , actual);
  }

  /**
   * 測試 Time.normalize() 進位（退位）是否正確
   **/
  @Test
  public void testNormalize()
  {
    Time t1 , t2;

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 60);
    t2 = new Time(2004 , 11 , 20 , 2 , 31 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 120);
    t2 = new Time(2004 , 11 , 20 , 2 , 32 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -1 );
    t2 = new Time(2004 , 11 , 20 , 2 , 29 ,  59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -59 );
    t2 = new Time(2004 , 11 , 20 , 2 , 29 ,  1);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -61 );
    t2 = new Time(2004 , 11 , 20 , 2 , 28 ,  59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -60 );
    t2 = new Time(2004 , 11 , 20 , 2 , 29 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -61 );
    t2 = new Time(2004 , 11 , 20 , 2 , 28 ,  59 );
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -120);
    t2 = new Time(2004 , 11 , 20 , 2 , 28 ,  0  );
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -1800);
    t2 = new Time(2004 , 11 , 20 , 2 ,  0 ,  0   );
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , -1801);
    t2 = new Time(2004 , 11 , 20 , 1 , 59 ,  59   );
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 60);
    t2 = new Time(2004 , 11 , 20 , 2 , 31 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 61);
    t2 = new Time(2004 , 11 , 20 , 2 , 31 ,  1);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 119);
    t2 = new Time(2004 , 11 , 20 , 2 , 31 ,  59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 120);
    t2 = new Time(2004 , 11 , 20 , 2 , 32 ,   0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 1800);
    t2 = new Time(2004 , 11 , 20 , 3 ,  0 ,    0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 30 , 1801);
    t2 = new Time(2004 , 11 , 20 , 3 ,  0 ,    1);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 59 , 60);
    t2 = new Time(2004 , 11 , 20 , 3 ,  0 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 59 , 120);
    t2 = new Time(2004 , 11 , 20 , 3 ,  1 ,   0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 60 , 60);
    t2 = new Time(2004 , 11 , 20 , 3 ,  1 ,  0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 60 , 3600);
    t2 = new Time(2004 , 11 , 20 , 4 ,  0 ,    0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 60 , -3600); //加一小時，減一小時
    t2 = new Time(2004 , 11 , 20 , 2 ,  0 ,    0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 60 , -7200); //加一小時，減兩小時
    t2 = new Time(2004 , 11 , 20 , 1 ,  0 ,    0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 2 , 60 , -7201); //加一小時，減兩小時又一秒
    t2 = new Time(2004 , 11 , 20 , 0 , 59 ,    59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 24 , 0 , 0);
    t2 = new Time(2004 , 11 , 21 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 25 , 0 , 0);
    t2 = new Time(2004 , 11 , 21 ,  1 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , 48 , 0 , 0);
    t2 = new Time(2004 , 11 , 22 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 ,  -1 , 0 , 0);
    t2 = new Time(2004 , 11 , 19 ,  23 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , -13 , 0 , 0);
    t2 = new Time(2004 , 11 , 19 ,  11 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , -24 , 0 , 0);
    t2 = new Time(2004 , 11 , 19 ,   0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , -25 , 0 , 0);
    t2 = new Time(2004 , 11 , 18 ,  23 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 20 , -25 , 0 , 0);
    t2 = new Time(2004 , 11 , 18 ,  23 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 30 ,  24 , 0 , 0);
    t2 = new Time(2004 , 12 ,  1 ,   0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 30 ,  0 , 0 , 24*60*60);
    t2 = new Time(2004 , 12 ,  1 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 30 ,  0 , 0 , 24*60*60*31);
    t2 = new Time(2004 , 12 , 31 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 , 11 , 30 ,  0 , 0 , 24*60*60*32);
    t2 = new Time(2005 ,  1 ,  1 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,  1 ,  0  ,  0 , -60);
    t2 = new Time(2004 ,  1 , 31 ,  23 , 59 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,  1 ,  0 , 0 , -60*60*24);
    t2 = new Time(2004 ,  1 , 31 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,  1 ,  0 , 0 , -60*60*24*31);
    t2 = new Time(2004 ,  1 ,  1 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2  ,   1 ,  0 ,  0 , -60*60*24*31-1);
    t2 = new Time(2003 ,  12 ,  31 , 23 , 59 , 59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,  1 ,  0 , 0 , 60*60*24);
    t2 = new Time(2004 ,  2 ,  2 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,  1 ,   0 ,  0 , 60*60*24-1);
    t2 = new Time(2004 ,  2 ,  1 ,  23 , 59 , 59);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,   1 ,  0 , 0 , 60*60*24*28);
    t2 = new Time(2004 ,  2 ,  29 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    t1 = new Time(2004 ,  2 ,   1 ,  0 , 0 , 60*60*24*29);
    t2 = new Time(2004 ,  3 ,   1 ,  0 , 0 , 0);
    assertEquals(t2 , t1);

    // ========================== 測試 julian gregorian cutover 的轉換 ==========================

    // cutover 當下
    t1 = new Time(true , 1582 , 10 ,  4 , 23 , 59 , 60);
    t2 = new Time(true , 1582 , 10 , 15 ,  0 ,  0 ,  0);
    assertEquals(t2 , t1);
    assertEquals(t2.getGmtJulDay() , t1.getGmtJulDay() , 0);

    t1 = new Time(true , 1582 , 10 , 15 ,  0 ,  0 ,  -1);
    t2 = new Time(true , 1582 , 10 ,  4 , 23 , 59 , 59);
    //assertEquals(t2 , t1);
    logger.info("t1 = {}" , t1);
    assertEquals(t2.getGmtJulDay() , t1.getGmtJulDay() , 0);
  }

  /**
   * 測試 Julian Day 是否正確
   */
  @Test
  public void testGetGmtJulDay()
  {
    double actual;
    double expected;


    time = new Time(false , 4713 , 1 , 1 , 12 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 0;
    assertEquals(expected , actual , 0);

    time = new Time(true , 1900 , 1 , 1, 0 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 2415020.5;
    assertEquals(expected , actual , 0);

    time = new Time(2004, 11,20 , 12 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 2453330;
    assertEquals(expected , actual , 0);

    time = new Time(2004, 11,21 , 0 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 2453330.5;
    assertEquals(expected , actual , 0);

    time = new Time(2004, 11,21 , 12 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 2453331;
    assertEquals(expected , actual , 0);

    time = new Time(2002, 10, 1 , 12 , 0 , 0);
    actual = time.getGmtJulDay();
    expected = 2452549.0;
    assertEquals(expected , actual , 0);


    //=============================曆法分界期間 (Gregorian)==================
    time = new Time(1752, 9, 14 , 12 , 0 , 0);
    assertEquals(2361222 , time.getGmtJulDay() , 0);

    time = new Time(1752, 9, 13 , 12 , 0 , 0);
    assertEquals(2361221 , time.getGmtJulDay() , 0);

    time = new Time(1582, 10, 15 , 0 , 0 , 0);
    assertEquals(2299160.5 , time.getGmtJulDay() , 0);

    //=============================曆法分界期間 (Julian)==================
    time = new Time(true , 1752 , 9 , 3 , 0 , 0 , 0);
    assertEquals(2361210.5 , time.getGmtJulDay() , 0);

    time = new Time(true , 1752 , 9 , 2 , 0 , 0 , 0);
    assertEquals(2361209.5 , time.getGmtJulDay() , 0);

    time = new Time(true , 1582 , 10 , 15 , 0 , 0 , 0);
    assertEquals(2299160.5 , time.getGmtJulDay() , 0);

    //=========================== Julian 切換到 Gregorian ==============

    time = new Time(true , 1582 , 10 , 4 , 0 , 0 , 0);
    assertEquals(2299159.5 , time.getGmtJulDay() , 0);

    //=========================== 西元元年以及 前一年的分界 ===============
    time = new Time(true , 1 , 1 , 1 , 0 , 0 , 0);
    assertEquals(1721423.5 , time.getGmtJulDay() , 0);

    time = new Time(false , 1 , 12 , 31 , 0 , 0 , 0);
    assertEquals(1721422.5 , time.getGmtJulDay() , 0);

    time = new Time(false , 1 , 1 , 1 , 0 , 0 , 0);
    assertEquals(1721057.5 , time.getGmtJulDay() , 0);

    time = new Time(false , 1 , 1 , 1 , 0 , 0 , 0);
    assertEquals(1721057.5 , time.getGmtJulDay() , 0);

    time = new Time(false , 2 , 12 , 31 , 0 , 0 , 0);
    assertEquals(1721056.5 , time.getGmtJulDay() , 0);

    //===================西元 (J) 前 2637 年 2 月 2 日，甲子年？=============
    time = new Time( false , 2637 , 1 , 11 , 12 , 0 , 0);
    assertEquals(758269.0 , time.getGmtJulDay() , 0);

    time = new Time( false , 2637 , 2 , 2 , 12 , 0 , 0);
    assertEquals(758291.0 , time.getGmtJulDay() , 0);

    time = new Time(false , 2637 , 2 , 2 , 0 , 0 , 0);
    assertEquals(758290.5 , time.getGmtJulDay() , 0);


    time = new Time(false , 4713 , 1 , 1 , 12 , 0 , 0);
    assertEquals(0 , time.getGmtJulDay() , 0);
  }

}
